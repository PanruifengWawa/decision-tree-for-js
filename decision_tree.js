trainData = [];testData = [];input = [];target= "";tree = {};function train() {	tree = createTree(trainData,input);	showInputs();	console.log(tree);}function test() {	var tbody = "";	var thead = "<tr><th>input</th><th>target</th><th>predicted target</th></tr>";	var correct = 0;	document.getElementById("myThead").innerHTML = thead;	for(var i = 0; i< testData.length; i++) {		var result = predict(testData[i]);				if (result != testData[i][testData[i].length-1]) {			result = "<span style='color:red;'>" + result + "</span>";		} else {			correct++;		}		tbody += "<tr><td>" + testData[i].slice(0,testData.length-1) + "</td><td> " + testData[i][testData[i].length-1] + " </td><td>" + result + "</td></tr>";	}	document.getElementById("myTbody").innerHTML = tbody;	document.getElementById("myCaption").innerHTML = "testNum:" + testData.length + "&nbsp;&nbsp;&nbsp; matchedNum:" + correct + "&nbsp;&nbsp;&nbsp; accuray:" + correct/testData.length;}function showInputs() {	document.getElementById("oneTest").style.display = "block";	document.getElementById("testDiv").style.display = "block";	for(var i = 0; i < input.length; i++) {		var myInput = document.createElement("input");		myInput.id = input[i];		myInput.type = "text";		var br = document.createElement("br");		document.getElementById("newinputs").append(input[i] + ":");		document.getElementById("newinputs").appendChild(myInput);		document.getElementById("newinputs").appendChild(br);	}	var myButton = document.createElement("button");	myButton.onclick = oneTestButton;	myButton.innerHTML = "test input data";	document.getElementById("newinputs").appendChild(myButton);}function oneTestButton() {	var testData = [];	for(var i = 0; i < input.length; i++) {		var value = document.getElementById(input[i]).value;		testData.push(value);	}	var result = predict(testData);	document.getElementById("testResult").innerHTML = "predict result: <span style='color:red;'>" + result + "</span>";}function predict(testData) {	var myTree = tree;	while(typeof(myTree) == 'object') {		for(var key in myTree) {			var index = input.getIndex(key);			myTree = myTree[key][testData[index]];		}	}	if (myTree == undefined) {		return "unknow";	}	return myTree;}function dataInit() {	trainData = [];	input = [];	target= "";	tree = {};}function createTree(subData,input) {	if (subData.countTarget()) {		return subData[0][subData[0].length-1];	}	if (subData[0].length == 1) {		var distinctCount = {};		for (var i = 0 ; i <  subData.length; i++) {			if (distinctCount[subData[i][0]] != undefined) {				distinctCount[subData[i][0]]++;			} else {				distinctCount[subData[i][0]] = 1;			}		}		var max = -1;		var value = "";		for (var key in distinctCount) {			if (distinctCount[key] > max) {				max = distinctCount[key];				value = key;			}		}		return value;	}		var bestFeature = subData.getBestFeatures();	var distinctCount1 = subData.getDistinctCount(bestFeature);	var subTree = {};	subTree[input[bestFeature]] = {};	for(var key in distinctCount1) {		subTree[input[bestFeature]][key] = createTree(subData.subData(bestFeature,key),input.deleteElement(bestFeature));	}	return subTree;	}function loadTestData() {	testData = [];	var file = document.getElementById("testData").files[0];	var reader = new FileReader();      reader.onload = function() {      	var firstLine = this.result.split("\n",1)[0].split(",");    	target = firstLine[firstLine.length-1];    	input = this.result.split("\n",1)[0].replace("," + target,"").split(",");        var content = this.result.replace(firstLine + "\n","").split("\n");        for (var i = 0; i < content.length; i++) {        	var oneRow = content[i].split(",");        	testData.push(oneRow);        };            };      reader.readAsText(file); }function loadTrainData() {	dataInit();	var file = document.getElementById("trainData").files[0];	var reader = new FileReader();      reader.onload = function() {      	var firstLine = this.result.split("\n",1)[0].split(",");    	target = firstLine[firstLine.length-1];    	input = this.result.split("\n",1)[0].replace("," + target,"").split(",");        var content = this.result.replace(firstLine + "\n","").split("\n");        for (var i = 0; i < content.length; i++) {        	var oneRow = content[i].split(",");        	trainData.push(oneRow);        };            };      reader.readAsText(file); }Array.prototype.getIndex = function(value) {	for(var i = 0; i < this.length; i++) {		if (this[i] == value) {			return i;		}	}	return -1;}Array.prototype.countTarget = function() {	var res = this;	for(var i = 0 ; i < this.length; i++) {		if (this[i][this[i].length-1] != this[0][this[0].length-1]) {			return false;		};	}	return true;}Array.prototype.deleteElement = function(index) {	var res = [];	for (var i = 0; i < this.length; i++) {		if (i != index) {			res.push(this[i]);		}	}	return res;}Array.prototype.getBestFeatures = function() {	var bestFeature = -1;	var bestEnt = 0;	for(var i = 0; i < this[0].length-1; i++) {		var distinctCount = this.getDistinctCount(i);		var distinctEnt = this.getEnt();		for (var key in distinctCount) {			subData = this.subData(i,key);			// console.log(key);			distinctEnt = distinctEnt - subData.length/this.length * subData.getEnt();		}		if (distinctEnt > bestEnt) {			bestEnt = distinctEnt;			bestFeature = i;		}	}	return bestFeature;}Array.prototype.subData = function(index,feature) {	var res = [];	for(var i = 0; i < this.length ; i++) {		var oneRow = this[i];		var oneRowToUse = [];		if (oneRow[index] == feature) {			for (var j = 0; j < oneRow.length; j++) {				if (j != index) {					oneRowToUse.push(oneRow[j]);				}			}			res.push(oneRowToUse);		}	}	return res;}Array.prototype.getDistinctCount = function(pos) {	var distinctCount = {};	for (var i = 0 ; i <  this.length; i++) {		if (distinctCount[this[i][pos]] != undefined) {			distinctCount[this[i][pos]]++;		} else {			distinctCount[this[i][pos]] = 1;		}	}	return distinctCount;}Array.prototype.getEnt = function() {	var res = 0;	// console.log(this);	var distinctCount = this.getDistinctCount(this[0].length-1);		for (var key in distinctCount) {		res = res - distinctCount[key]/this.length * Math.log(distinctCount[key]/this.length) / Math.log(2);	}	return res;}